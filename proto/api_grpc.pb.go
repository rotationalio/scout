// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ScoutClient is the client API for Scout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoutClient interface {
	Events(ctx context.Context, opts ...grpc.CallOption) (Scout_EventsClient, error)
}

type scoutClient struct {
	cc grpc.ClientConnInterface
}

func NewScoutClient(cc grpc.ClientConnInterface) ScoutClient {
	return &scoutClient{cc}
}

func (c *scoutClient) Events(ctx context.Context, opts ...grpc.CallOption) (Scout_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scout_serviceDesc.Streams[0], "/scout.Scout/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &scoutEventsClient{stream}
	return x, nil
}

type Scout_EventsClient interface {
	Send(*Report) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type scoutEventsClient struct {
	grpc.ClientStream
}

func (x *scoutEventsClient) Send(m *Report) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scoutEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScoutServer is the server API for Scout service.
// All implementations must embed UnimplementedScoutServer
// for forward compatibility
type ScoutServer interface {
	Events(Scout_EventsServer) error
	mustEmbedUnimplementedScoutServer()
}

// UnimplementedScoutServer must be embedded to have forward compatible implementations.
type UnimplementedScoutServer struct {
}

func (UnimplementedScoutServer) Events(Scout_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedScoutServer) mustEmbedUnimplementedScoutServer() {}

// UnsafeScoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoutServer will
// result in compilation errors.
type UnsafeScoutServer interface {
	mustEmbedUnimplementedScoutServer()
}

func RegisterScoutServer(s grpc.ServiceRegistrar, srv ScoutServer) {
	s.RegisterService(&_Scout_serviceDesc, srv)
}

func _Scout_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScoutServer).Events(&scoutEventsServer{stream})
}

type Scout_EventsServer interface {
	Send(*Event) error
	Recv() (*Report, error)
	grpc.ServerStream
}

type scoutEventsServer struct {
	grpc.ServerStream
}

func (x *scoutEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scoutEventsServer) Recv() (*Report, error) {
	m := new(Report)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Scout_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scout.Scout",
	HandlerType: (*ScoutServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Scout_Events_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
